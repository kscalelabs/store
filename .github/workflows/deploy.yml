name: Deploys latest code

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy
  cancel-in-progress: true

jobs:
  build-and-deploy-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Restore cache
        id: restore-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            node_modules/
          key: deploy-${{ github.event.pull_request.base.sha || github.sha }}
          restore-keys: |
            deploy-

      - name: Install Node package
        working-directory: frontend
        run: |
          npm install

      - name: Write .env.production
        working-directory: frontend
        run: |
          echo "REACT_APP_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.production
          echo "REACT_APP_BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env.production

      - name: Build frontend
        run: |
          npm run build
        working-directory: frontend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Replace S3 bucket contents
        run: |
          aws s3 rm s3://${{ secrets.AWS_FRONTEND_S3_BUCKET }} --recursive
          aws s3 cp frontend/build s3://${{ secrets.AWS_FRONTEND_S3_BUCKET }} --recursive
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  build-and-deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
