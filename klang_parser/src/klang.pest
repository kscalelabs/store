WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" }

EOL = _{ ";" }

program = { SOI ~ function_def* ~ EOI }

function_def = { "fn" ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ doc_string? ~ block }
parameter_list = { identifier ~ ( "," ~ identifier )* ~ ( "," )? }
doc_string = { ":" ~ string }

block = { "{" ~ statement* ~ "}" }
statement = {
    (
        assignment_stmt |
        expression_stmt |
        for_loop |
        while_loop |
        if_statement |
        empty_stmt
    )
}

empty_stmt = { EOL }

assignment_stmt = { identifier ~ assign_op ~ expression ~ EOL }
assign_op = { "=" | "+=" | "-=" | "*=" | "/=" }

for_loop = { "for" ~ identifier ~ ":" ~ expression ~ block }
while_loop = { "while" ~ expression ~ block }
if_statement = { "if" ~ "(" ~ expression ~ ")" ~ block }

expression_stmt = { expression ~ EOL }
expression = { conditional }
conditional = { logical_or ~ ( "?" ~ expression ~ ":" ~ expression )? }
logical_or = { logical_and ~ ( "||" ~ logical_and )* }
logical_and = { equality ~ ( "&&" ~ equality )* }
equality = { comparison ~ ( ( "==" | "!=" ) ~ comparison )* }
comparison = { additive ~ ( ( "<" | ">" | "<=" | ">=" ) ~ additive )* }
additive = { multiplicative ~ ( ( "+" | "-" ) ~ multiplicative )* }
multiplicative = { unary ~ ( ( "*" | "/" ) ~ unary )* }
unary = { ( "!" | "-" | "*" )* ~ primary }

primary = {
    function_call |
    literal |
    identifier
}

tuple = { "(" ~ expression_list ~ ")" }
array = { "[" ~ expression_list ~ "]" }
expression_list = { expression ~ ( "," ~ expression )* ~ ( "," )? }

dictionary = { "{" ~ key_value_pair ~ ( "," ~ key_value_pair )* ~ "}" }
key_value_pair = { expression ~ ":" ~ expression }

function_call = { identifier ~ "(" ~ argument_list? ~ ")" }
argument_list = { ( argument ~ ( "," ~ argument )* ) ~ ( "," )? }
argument = { function_kwarg | expression }
function_kwarg = { identifier ~ "=" ~ expression }

literal = { number | string | boolean | array | tuple | dictionary }
number = @{
    "-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ unit?
}

unit = @{
    // Length units (metric)
    "mm" | "cm" | "m" | "km" |
    // Length units (imperial)
    "in" | "ft" | "yd" | "mi" |
    // Time units
    "ms" | "s" | "min" | "hr" | "day" |
    // Angle units
    "deg" | "rad"
}

string = @{
    ( "\"" | "“" ) ~
    ( "\\" ~ ANY | !("\"" | "”") ~ ANY )* ~
    ( "\"" | "”" )
}
boolean = { "true" | "false" }

identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
