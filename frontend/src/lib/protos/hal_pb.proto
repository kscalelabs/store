syntax = "proto3";

package hal_pb;

service ServoControl {
  rpc GetPositions (Empty) returns (JointPositions);
  rpc SetPositions (JointPositions) returns (Empty);
  rpc EnableMovement (Empty) returns (Empty);
  rpc DisableMovement (Empty) returns (Empty);
  rpc SetPosition (JointPosition) returns (Empty);
  rpc SetWifiInfo (WifiCredentials) returns (Empty);
  rpc GetServoInfo (ServoId) returns (ServoInfoResponse);
  rpc Scan (Empty) returns (ServoIds);
  rpc ChangeId (IdChange) returns (ChangeIdResponse);
  rpc StartCalibration (CalibrationRequest) returns (CalibrationResponse);
  rpc CancelCalibration (ServoId) returns (CalibrationResponse);
  rpc StartVideoStream (Empty) returns (Empty);
  rpc StopVideoStream (Empty) returns (Empty);
  rpc GetVideoStreamUrls (Empty) returns (VideoStreamUrls);
  rpc GetCalibrationStatus (Empty) returns (CalibrationStatus);
  rpc SetTorque (TorqueSettings) returns (Empty);
  rpc SetTorqueEnable (TorqueEnableSettings) returns (Empty);
  rpc GetImuData (Empty) returns (ImuData);
  rpc UploadAudio (stream AudioChunk) returns (UploadResponse);
  rpc PlayAudio (PlayRequest) returns (Empty);
  rpc StartRecording (RecordingConfig) returns (Empty);
  rpc StopRecording (Empty) returns (Empty);
  rpc GetRecordedAudio (Empty) returns (stream AudioChunk);
}

message Empty {}

message JointPosition {
  int32 id = 1;
  float position = 2;
  float speed = 3;
}

message JointPositions {
  repeated JointPosition positions = 1;
}

message WifiCredentials {
  string ssid = 1;
  string password = 2;
}

message ServoId {
  int32 id = 1;
}

message ServoInfo {
  int32 id = 1;
  float temperature = 2;
  float current = 3;
  float voltage = 4;
  float speed = 5;
  float current_position = 6;
  float min_position = 7;
  float max_position = 8;
}

message ServoInfoResponse {
  oneof result {
    ServoInfo info = 1;
    ErrorInfo error = 2;
  }
}

message ChangeIdResponse {
  oneof result {
    bool success = 1;
    ErrorInfo error = 2;
  }
}

message ErrorInfo {
  string message = 1;
  int32 code = 2;
}

message ServoIds {
  repeated int32 ids = 1;
}

message IdChange {
  int32 old_id = 1;
  int32 new_id = 2;
}

message VideoStreamUrls {
  repeated string webrtc = 1;
  repeated string hls = 2;
  repeated string hls_ll = 3;
  repeated string mse = 4;
  repeated string rtsp = 5;
}

message CalibrationResponse {
  oneof result {
    bool success = 1;
    ErrorInfo error = 2;
  }
}

message CalibrationStatus {
  bool is_calibrating = 1;
  int32 calibrating_servo_id = 2;
}

message TorqueSettings {
  repeated TorqueSetting settings = 1;
}

message TorqueSetting {
  int32 id = 1;
  float torque = 2;
}

message TorqueEnableSettings {
  repeated TorqueEnableSetting settings = 1;
}

message TorqueEnableSetting {
  int32 id = 1;
  bool enable = 2;
}

message ImuData {
  Vector3 gyro = 1;     // Angular velocity in degrees per second (dps)
  Vector3 accel = 2;    // Linear acceleration in milli-g (mg)
}

message Vector3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message AudioChunk {
  bytes data = 1;
  string format = 2;  // e.g., "wav", "mp3"
  int64 timestamp = 3;
}

message UploadResponse {
  string audio_id = 1;
  oneof result {
    bool success = 2;
    ErrorInfo error = 3;
  }
}

message PlayRequest {
  string audio_id = 1;
  float volume = 2;  // 0.0 to 1.0
}

message RecordingConfig {
  int32 sample_rate = 1;  // e.g., 44100, 48000
  string format = 2;      // e.g., "wav"
  int32 channels = 3;     // e.g., 1 for mono, 2 for stereo
}

message CalibrationRequest {
  int32 servo_id = 1;
  int32 calibration_speed = 2;
  float current_threshold = 3;
}
