// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "hal_pb.proto" (package "hal_pb", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ServoControl } from "./hal_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RecordingConfig } from "./hal_pb";
import type { PlayRequest } from "./hal_pb";
import type { UploadResponse } from "./hal_pb";
import type { AudioChunk } from "./hal_pb";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ImuData } from "./hal_pb";
import type { TorqueEnableSettings } from "./hal_pb";
import type { TorqueSettings } from "./hal_pb";
import type { CalibrationStatus } from "./hal_pb";
import type { VideoStreamUrls } from "./hal_pb";
import type { CalibrationResponse } from "./hal_pb";
import type { CalibrationRequest } from "./hal_pb";
import type { ChangeIdResponse } from "./hal_pb";
import type { IdChange } from "./hal_pb";
import type { ServoIds } from "./hal_pb";
import type { ServoInfoResponse } from "./hal_pb";
import type { ServoId } from "./hal_pb";
import type { WifiCredentials } from "./hal_pb";
import type { JointPosition } from "./hal_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { JointPositions } from "./hal_pb";
import type { Empty } from "./hal_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service hal_pb.ServoControl
 */
export interface IServoControlClient {
    /**
     * @generated from protobuf rpc: GetPositions(hal_pb.Empty) returns (hal_pb.JointPositions);
     */
    getPositions(input: Empty, options?: RpcOptions): UnaryCall<Empty, JointPositions>;
    /**
     * @generated from protobuf rpc: SetPositions(hal_pb.JointPositions) returns (hal_pb.Empty);
     */
    setPositions(input: JointPositions, options?: RpcOptions): UnaryCall<JointPositions, Empty>;
    /**
     * @generated from protobuf rpc: EnableMovement(hal_pb.Empty) returns (hal_pb.Empty);
     */
    enableMovement(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
    /**
     * @generated from protobuf rpc: DisableMovement(hal_pb.Empty) returns (hal_pb.Empty);
     */
    disableMovement(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
    /**
     * @generated from protobuf rpc: SetPosition(hal_pb.JointPosition) returns (hal_pb.Empty);
     */
    setPosition(input: JointPosition, options?: RpcOptions): UnaryCall<JointPosition, Empty>;
    /**
     * @generated from protobuf rpc: SetWifiInfo(hal_pb.WifiCredentials) returns (hal_pb.Empty);
     */
    setWifiInfo(input: WifiCredentials, options?: RpcOptions): UnaryCall<WifiCredentials, Empty>;
    /**
     * @generated from protobuf rpc: GetServoInfo(hal_pb.ServoId) returns (hal_pb.ServoInfoResponse);
     */
    getServoInfo(input: ServoId, options?: RpcOptions): UnaryCall<ServoId, ServoInfoResponse>;
    /**
     * @generated from protobuf rpc: Scan(hal_pb.Empty) returns (hal_pb.ServoIds);
     */
    scan(input: Empty, options?: RpcOptions): UnaryCall<Empty, ServoIds>;
    /**
     * @generated from protobuf rpc: ChangeId(hal_pb.IdChange) returns (hal_pb.ChangeIdResponse);
     */
    changeId(input: IdChange, options?: RpcOptions): UnaryCall<IdChange, ChangeIdResponse>;
    /**
     * @generated from protobuf rpc: StartCalibration(hal_pb.CalibrationRequest) returns (hal_pb.CalibrationResponse);
     */
    startCalibration(input: CalibrationRequest, options?: RpcOptions): UnaryCall<CalibrationRequest, CalibrationResponse>;
    /**
     * @generated from protobuf rpc: CancelCalibration(hal_pb.ServoId) returns (hal_pb.CalibrationResponse);
     */
    cancelCalibration(input: ServoId, options?: RpcOptions): UnaryCall<ServoId, CalibrationResponse>;
    /**
     * @generated from protobuf rpc: StartVideoStream(hal_pb.Empty) returns (hal_pb.Empty);
     */
    startVideoStream(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
    /**
     * @generated from protobuf rpc: StopVideoStream(hal_pb.Empty) returns (hal_pb.Empty);
     */
    stopVideoStream(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
    /**
     * @generated from protobuf rpc: GetVideoStreamUrls(hal_pb.Empty) returns (hal_pb.VideoStreamUrls);
     */
    getVideoStreamUrls(input: Empty, options?: RpcOptions): UnaryCall<Empty, VideoStreamUrls>;
    /**
     * @generated from protobuf rpc: GetCalibrationStatus(hal_pb.Empty) returns (hal_pb.CalibrationStatus);
     */
    getCalibrationStatus(input: Empty, options?: RpcOptions): UnaryCall<Empty, CalibrationStatus>;
    /**
     * @generated from protobuf rpc: SetTorque(hal_pb.TorqueSettings) returns (hal_pb.Empty);
     */
    setTorque(input: TorqueSettings, options?: RpcOptions): UnaryCall<TorqueSettings, Empty>;
    /**
     * @generated from protobuf rpc: SetTorqueEnable(hal_pb.TorqueEnableSettings) returns (hal_pb.Empty);
     */
    setTorqueEnable(input: TorqueEnableSettings, options?: RpcOptions): UnaryCall<TorqueEnableSettings, Empty>;
    /**
     * @generated from protobuf rpc: GetImuData(hal_pb.Empty) returns (hal_pb.ImuData);
     */
    getImuData(input: Empty, options?: RpcOptions): UnaryCall<Empty, ImuData>;
    /**
     * @generated from protobuf rpc: UploadAudio(stream hal_pb.AudioChunk) returns (hal_pb.UploadResponse);
     */
    uploadAudio(options?: RpcOptions): ClientStreamingCall<AudioChunk, UploadResponse>;
    /**
     * @generated from protobuf rpc: PlayAudio(hal_pb.PlayRequest) returns (hal_pb.Empty);
     */
    playAudio(input: PlayRequest, options?: RpcOptions): UnaryCall<PlayRequest, Empty>;
    /**
     * @generated from protobuf rpc: StartRecording(hal_pb.RecordingConfig) returns (hal_pb.Empty);
     */
    startRecording(input: RecordingConfig, options?: RpcOptions): UnaryCall<RecordingConfig, Empty>;
    /**
     * @generated from protobuf rpc: StopRecording(hal_pb.Empty) returns (hal_pb.Empty);
     */
    stopRecording(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty>;
    /**
     * @generated from protobuf rpc: GetRecordedAudio(hal_pb.Empty) returns (stream hal_pb.AudioChunk);
     */
    getRecordedAudio(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, AudioChunk>;
}
/**
 * @generated from protobuf service hal_pb.ServoControl
 */
export class ServoControlClient implements IServoControlClient, ServiceInfo {
    typeName = ServoControl.typeName;
    methods = ServoControl.methods;
    options = ServoControl.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetPositions(hal_pb.Empty) returns (hal_pb.JointPositions);
     */
    getPositions(input: Empty, options?: RpcOptions): UnaryCall<Empty, JointPositions> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, JointPositions>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetPositions(hal_pb.JointPositions) returns (hal_pb.Empty);
     */
    setPositions(input: JointPositions, options?: RpcOptions): UnaryCall<JointPositions, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<JointPositions, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EnableMovement(hal_pb.Empty) returns (hal_pb.Empty);
     */
    enableMovement(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DisableMovement(hal_pb.Empty) returns (hal_pb.Empty);
     */
    disableMovement(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetPosition(hal_pb.JointPosition) returns (hal_pb.Empty);
     */
    setPosition(input: JointPosition, options?: RpcOptions): UnaryCall<JointPosition, Empty> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<JointPosition, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetWifiInfo(hal_pb.WifiCredentials) returns (hal_pb.Empty);
     */
    setWifiInfo(input: WifiCredentials, options?: RpcOptions): UnaryCall<WifiCredentials, Empty> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<WifiCredentials, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetServoInfo(hal_pb.ServoId) returns (hal_pb.ServoInfoResponse);
     */
    getServoInfo(input: ServoId, options?: RpcOptions): UnaryCall<ServoId, ServoInfoResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServoId, ServoInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Scan(hal_pb.Empty) returns (hal_pb.ServoIds);
     */
    scan(input: Empty, options?: RpcOptions): UnaryCall<Empty, ServoIds> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ServoIds>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ChangeId(hal_pb.IdChange) returns (hal_pb.ChangeIdResponse);
     */
    changeId(input: IdChange, options?: RpcOptions): UnaryCall<IdChange, ChangeIdResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<IdChange, ChangeIdResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StartCalibration(hal_pb.CalibrationRequest) returns (hal_pb.CalibrationResponse);
     */
    startCalibration(input: CalibrationRequest, options?: RpcOptions): UnaryCall<CalibrationRequest, CalibrationResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<CalibrationRequest, CalibrationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CancelCalibration(hal_pb.ServoId) returns (hal_pb.CalibrationResponse);
     */
    cancelCalibration(input: ServoId, options?: RpcOptions): UnaryCall<ServoId, CalibrationResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<ServoId, CalibrationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StartVideoStream(hal_pb.Empty) returns (hal_pb.Empty);
     */
    startVideoStream(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StopVideoStream(hal_pb.Empty) returns (hal_pb.Empty);
     */
    stopVideoStream(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetVideoStreamUrls(hal_pb.Empty) returns (hal_pb.VideoStreamUrls);
     */
    getVideoStreamUrls(input: Empty, options?: RpcOptions): UnaryCall<Empty, VideoStreamUrls> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, VideoStreamUrls>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCalibrationStatus(hal_pb.Empty) returns (hal_pb.CalibrationStatus);
     */
    getCalibrationStatus(input: Empty, options?: RpcOptions): UnaryCall<Empty, CalibrationStatus> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, CalibrationStatus>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetTorque(hal_pb.TorqueSettings) returns (hal_pb.Empty);
     */
    setTorque(input: TorqueSettings, options?: RpcOptions): UnaryCall<TorqueSettings, Empty> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<TorqueSettings, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetTorqueEnable(hal_pb.TorqueEnableSettings) returns (hal_pb.Empty);
     */
    setTorqueEnable(input: TorqueEnableSettings, options?: RpcOptions): UnaryCall<TorqueEnableSettings, Empty> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<TorqueEnableSettings, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetImuData(hal_pb.Empty) returns (hal_pb.ImuData);
     */
    getImuData(input: Empty, options?: RpcOptions): UnaryCall<Empty, ImuData> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ImuData>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UploadAudio(stream hal_pb.AudioChunk) returns (hal_pb.UploadResponse);
     */
    uploadAudio(options?: RpcOptions): ClientStreamingCall<AudioChunk, UploadResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<AudioChunk, UploadResponse>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: PlayAudio(hal_pb.PlayRequest) returns (hal_pb.Empty);
     */
    playAudio(input: PlayRequest, options?: RpcOptions): UnaryCall<PlayRequest, Empty> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<PlayRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StartRecording(hal_pb.RecordingConfig) returns (hal_pb.Empty);
     */
    startRecording(input: RecordingConfig, options?: RpcOptions): UnaryCall<RecordingConfig, Empty> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecordingConfig, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StopRecording(hal_pb.Empty) returns (hal_pb.Empty);
     */
    stopRecording(input: Empty, options?: RpcOptions): UnaryCall<Empty, Empty> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRecordedAudio(hal_pb.Empty) returns (stream hal_pb.AudioChunk);
     */
    getRecordedAudio(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, AudioChunk> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, AudioChunk>("serverStreaming", this._transport, method, opt, input);
    }
}
