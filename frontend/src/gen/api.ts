/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Root */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/api/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Logout User Endpoint */
        delete: operations["logout_user_endpoint_auth_api_logout_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/github/client-id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Github Client Id Endpoint */
        get: operations["github_client_id_endpoint_auth_github_client_id_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/github/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Github Code
         * @description Gives the user a session token upon successful github authentication and creation of user.
         *
         *     Args:
         *         data: The request body, containing the code from the OAuth redirect.
         *         crud: The CRUD object.
         *         response: The response object.
         *
         *     Returns:
         *         UserInfoResponse.
         */
        post: operations["github_code_auth_github_code_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/client-id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Google Client Id Endpoint */
        get: operations["google_client_id_endpoint_auth_google_client_id_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Google Login Endpoint */
        post: operations["google_login_endpoint_auth_google_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/signup/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Signup Token
         * @description Creates a signup token and emails it to the user.
         */
        post: operations["create_signup_token_auth_email_signup_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/signup/get/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Signup Token */
        get: operations["get_signup_token_auth_email_signup_get__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/signup/delete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Signup Token */
        delete: operations["delete_signup_token_auth_email_signup_delete__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register User */
        post: operations["register_user_auth_email_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/email/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login User */
        post: operations["login_user_auth_email_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifacts/url/{artifact_type}/{listing_id}/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Artifact Url */
        get: operations["artifact_url_artifacts_url__artifact_type___listing_id___name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifacts/info/{artifact_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Artifact Info */
        get: operations["get_artifact_info_artifacts_info__artifact_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifacts/list/{listing_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Artifacts */
        get: operations["list_artifacts_artifacts_list__listing_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifacts/upload/{listing_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload */
        post: operations["upload_artifacts_upload__listing_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifacts/edit/{artifact_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Artifact */
        put: operations["edit_artifact_artifacts_edit__artifact_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifacts/delete/{artifact_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Artifact */
        delete: operations["delete_artifact_artifacts_delete__artifact_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artifacts/list/{listing_id}/main": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set Main Image */
        put: operations["set_main_image_artifacts_list__listing_id__main_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kernel-images/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload Kernel Image */
        post: operations["upload_kernel_image_kernel_images_upload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kernel-images/info/{kernel_image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Kernel Image Info */
        get: operations["get_kernel_image_info_kernel_images_info__kernel_image_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kernel-images/edit/{kernel_image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Kernel Image */
        put: operations["edit_kernel_image_kernel_images_edit__kernel_image_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kernel-images/delete/{kernel_image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Kernel Image */
        delete: operations["delete_kernel_image_kernel_images_delete__kernel_image_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kernel-images/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Public Kernel Images */
        get: operations["list_public_kernel_images_kernel_images_public_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/kernel-images/download/{kernel_image_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download Kernel Image */
        get: operations["download_kernel_image_kernel_images_download__kernel_image_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/keys/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** New Key */
        post: operations["new_key_keys_new_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/keys/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Keys */
        get: operations["list_keys_keys_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/keys/delete/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Key */
        delete: operations["delete_key_keys_delete__key__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/featured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Featured Listings
         * @description Get the current list of featured listing IDs.
         */
        get: operations["get_featured_listings_listings_featured_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/featured/{listing_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Toggle Featured Listing */
        put: operations["toggle_featured_listing_listings_featured__listing_id__put"];
        post?: never;
        /** Remove Featured Listing */
        delete: operations["remove_featured_listing_listings_featured__listing_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Listings */
        get: operations["list_listings_listings_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Batch Listing Info */
        get: operations["get_batch_listing_info_listings_batch_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/dump": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Dump Listings */
        get: operations["dump_listings_listings_dump_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Listings */
        get: operations["get_user_listings_listings_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get My Listings */
        get: operations["get_my_listings_listings_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Listing */
        post: operations["add_listing_listings_add_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/delete/{listing_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete Listing */
        delete: operations["delete_listing_listings_delete__listing_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/edit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Edit Listing */
        put: operations["edit_listing_listings_edit__id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/upvotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Upvoted Listings */
        get: operations["get_upvoted_listings_listings_upvotes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/{listing_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Listing */
        get: operations["get_listing_listings__listing_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/{username}/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Listing By Username And Slug */
        get: operations["get_listing_by_username_and_slug_listings__username___slug__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/{id}/vote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Vote Listing */
        post: operations["vote_listing_listings__id__vote_post"];
        /** Remove Vote */
        delete: operations["remove_vote_listings__id__vote_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/onshape/set/{listing_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set Onshape Document */
        post: operations["set_onshape_document_onshape_set__listing_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/onshape/pull/{listing_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Pull Onshape Document */
        get: operations["pull_onshape_document_onshape_pull__listing_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/user-orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Orders */
        get: operations["get_user_orders_orders_user_orders_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/order/{order_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Order */
        get: operations["get_order_orders_order__order_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/order-with-product/{order_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Order With Product */
        get: operations["get_order_with_product_orders_order_with_product__order_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/user-orders-with-products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Orders With Products */
        get: operations["get_user_orders_with_products_orders_user_orders_with_products_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/update-order-address/{order_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Order Address */
        put: operations["update_order_address_orders_update_order_address__order_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Robot
         * @description Create a new robot.
         */
        post: operations["create_robot_robots_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/get/{robot_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Robot
         * @description Get a specific robot.
         */
        get: operations["get_robot_robots_get__robot_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List User Robots
         * @description List all robots for the current user.
         */
        get: operations["list_user_robots_robots_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/update/{robot_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Robot
         * @description Update a robot's information.
         */
        put: operations["update_robot_robots_update__robot_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/delete/{robot_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Robot
         * @description Delete a robot.
         */
        delete: operations["delete_robot_robots_delete__robot_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/check-order/{order_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Order Robot
         * @description Check if an order has an associated robot.
         */
        get: operations["check_order_robot_robots_check_order__order_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/urdf/{listing_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Robot Urdf
         * @description Get the URDF for a robot.
         */
        get: operations["get_robot_urdf_robots_urdf__listing_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stripe/create-payment-intent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Payment Intent */
        post: operations["create_payment_intent_stripe_create_payment_intent_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stripe/refunds/{order_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Refund Payment Intent */
        put: operations["refund_payment_intent_stripe_refunds__order_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stripe/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stripe Webhook */
        post: operations["stripe_webhook_stripe_webhook_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stripe/create-checkout-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Checkout Session */
        post: operations["create_checkout_session_stripe_create_checkout_session_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stripe/get-product/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Product */
        get: operations["get_product_stripe_get_product__product_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stripe/connect/account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Connect Account */
        post: operations["create_connect_account_stripe_connect_account_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stripe/connect/account/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Connect Account Session */
        post: operations["create_connect_account_session_stripe_connect_account_session_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stripe/connect/delete/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete Test Accounts */
        post: operations["delete_test_accounts_stripe_connect_delete_accounts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Info Endpoint */
        get: operations["get_user_info_endpoint_users_me_get"];
        /** Update Profile */
        put: operations["update_profile_users_me_put"];
        post?: never;
        /** Delete User Endpoint */
        delete: operations["delete_user_endpoint_users_me_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Users Batch Endpoint */
        get: operations["get_users_batch_endpoint_users_batch_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/public/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Users Public Batch Endpoint */
        get: operations["get_users_public_batch_endpoint_users_public_batch_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User Info By Id Endpoint */
        get: operations["get_user_info_by_id_endpoint_users__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/public/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get My Public User Info Endpoint */
        get: operations["get_my_public_user_info_endpoint_users_public_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/public/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Public User Info By Id Endpoint */
        get: operations["get_public_user_info_by_id_endpoint_users_public__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me/username": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Username */
        put: operations["update_username_users_me_username_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/validate-api-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Validate Api Key Endpoint */
        get: operations["validate_api_key_endpoint_users_validate_api_key_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/set-moderator": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set Moderator */
        post: operations["set_moderator_users_set_moderator_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/check-username/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check Username Availability */
        get: operations["check_username_availability_users_check_username__username__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/set-content-manager": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set Content Manager */
        post: operations["set_content_manager_users_set_content_manager_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teleop/rtc/store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Store Ice Candidate */
        post: operations["store_ice_candidate_teleop_rtc_store_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teleop/rtc/poll/ice-candidates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Poll Ice Candidates
         * @description Defines the polling endpoint for ICE candidates.
         */
        get: operations["poll_ice_candidates_teleop_rtc_poll_ice_candidates_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ArtifactUrls */
        ArtifactUrls: {
            /** Small */
            small?: string | null;
            /** Large */
            large: string;
        };
        /** AuthResponse */
        AuthResponse: {
            /** Api Key */
            api_key: string;
        };
        /** Body_add_listing_listings_add_post */
        Body_add_listing_listings_add_post: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Child Ids
             * @default
             */
            child_ids: string;
            /**
             * Slug
             * @default
             */
            slug: string;
            /** Stripe Link */
            stripe_link?: string | null;
            /** Photos */
            photos?: string[];
        };
        /** Body_create_connect_account_session_stripe_connect_account_session_post */
        Body_create_connect_account_session_stripe_connect_account_session_post: {
            /** Account Id */
            account_id: string;
        };
        /** Body_pull_onshape_document_onshape_pull__listing_id__get */
        Body_pull_onshape_document_onshape_pull__listing_id__get: {
            /** Suffix To Joint Effort */
            suffix_to_joint_effort?: {
                [key: string]: number;
            } | null;
            /** Suffix To Joint Velocity */
            suffix_to_joint_velocity?: {
                [key: string]: number;
            } | null;
        };
        /** Body_upload_artifacts_upload__listing_id__post */
        Body_upload_artifacts_upload__listing_id__post: {
            /** Files */
            files: string[];
        };
        /** CancelReason */
        CancelReason: {
            /** Reason */
            reason: string;
            /** Details */
            details: string;
        };
        /** ClientIdResponse */
        ClientIdResponse: {
            /** Client Id */
            client_id: string;
        };
        /** CreateCheckoutSessionRequest */
        CreateCheckoutSessionRequest: {
            /** Product Id */
            product_id: string;
            /** Cancel Url */
            cancel_url: string;
        };
        /** CreateCheckoutSessionResponse */
        CreateCheckoutSessionResponse: {
            /** Session Id */
            session_id: string;
        };
        /** CreateConnectAccountResponse */
        CreateConnectAccountResponse: {
            /** Account Id */
            account_id: string;
        };
        /** CreateRefundsRequest */
        CreateRefundsRequest: {
            /** Payment Intent Id */
            payment_intent_id: string;
            cancel_reason: components["schemas"]["CancelReason"];
            /** Amount */
            amount: number;
        };
        /** CreateRobotRequest */
        CreateRobotRequest: {
            /** Listing Id */
            listing_id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Order Id */
            order_id?: string | null;
        };
        /** DeleteTokenResponse */
        DeleteTokenResponse: {
            /** Message */
            message: string;
        };
        /** DumpListingsResponse */
        DumpListingsResponse: {
            /** Listings */
            listings: components["schemas"]["Listing"][];
        };
        /** EmailSignUpRequest */
        EmailSignUpRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
        };
        /** EmailSignUpResponse */
        EmailSignUpResponse: {
            /** Message */
            message: string;
        };
        /** FeaturedListingsResponse */
        FeaturedListingsResponse: {
            /** Listing Ids */
            listing_ids: string[];
        };
        /** GetBatchListingsResponse */
        GetBatchListingsResponse: {
            /** Listings */
            listings: components["schemas"]["ListingInfoResponse"][];
        };
        /** GetListingResponse */
        GetListingResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Creator Id */
            creator_id: string | null;
            /** Creator Name */
            creator_name: string | null;
            /** Username */
            username: string | null;
            /** Slug */
            slug: string | null;
            /** Score */
            score: number;
            /** Views */
            views: number;
            /** Created At */
            created_at: number;
            /** Artifacts */
            artifacts: components["schemas"]["SingleArtifactResponse"][];
            /** Can Edit */
            can_edit: boolean;
            /** User Vote */
            user_vote: boolean | null;
            /** Onshape Url */
            onshape_url: string | null;
            /** Stripe Link */
            stripe_link: string | null;
            /** Is Featured */
            is_featured: boolean;
        };
        /** GetTokenResponse */
        GetTokenResponse: {
            /** Id */
            id: string;
            /** Email */
            email: string;
        };
        /** GithubAuthRequest */
        GithubAuthRequest: {
            /** Code */
            code: string;
        };
        /** GithubAuthResponse */
        GithubAuthResponse: {
            /** Api Key */
            api_key: string;
        };
        /** GoogleLogin */
        GoogleLogin: {
            /** Token */
            token: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** KernelImageResponse */
        KernelImageResponse: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Size */
            size: number;
            /** Timestamp */
            timestamp: number;
            /** Is Public */
            is_public: boolean;
            /** Is Official */
            is_official: boolean;
            /** Downloads */
            downloads: number;
        };
        /** KernelImageUploadRequest */
        KernelImageUploadRequest: {
            /** Name */
            name: string;
            /** File */
            file: string;
            /** Is Public */
            is_public: boolean;
            /** Is Official */
            is_official: boolean;
            /** Description */
            description?: string | null;
        };
        /** KeysResponseItem */
        KeysResponseItem: {
            /** Token */
            token: string;
            /** Permissions */
            permissions: ("read" | "write" | "admin")[] | null;
        };
        /** ListArtifactsResponse */
        ListArtifactsResponse: {
            /** Artifacts */
            artifacts: components["schemas"]["SingleArtifactResponse"][];
        };
        /** ListKeysResponse */
        ListKeysResponse: {
            /** Keys */
            keys: components["schemas"]["KeysResponseItem"][];
        };
        /** ListListingsResponse */
        ListListingsResponse: {
            /** Listings */
            listings: components["schemas"]["ListingInfo"][];
            /**
             * Has Next
             * @default false
             */
            has_next: boolean;
        };
        /**
         * Listing
         * @description Defines a recursively-defined listing.
         *
         *     Listings can have sub-listings with their component parts. They can also
         *     have associated user-uploaded artifacts like images and URDFs.
         */
        Listing: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Created At */
            created_at: number;
            /** Updated At */
            updated_at: number;
            /** Name */
            name: string;
            /** Slug */
            slug: string;
            /** Child Ids */
            child_ids: string[];
            /** Description */
            description?: string | null;
            /** Onshape Url */
            onshape_url?: string | null;
            /**
             * Views
             * @default 0
             */
            views: number;
            /**
             * Score
             * @default 0
             */
            score: number;
            /** Stripe Link */
            stripe_link?: string | null;
        };
        /** ListingInfo */
        ListingInfo: {
            /** Id */
            id: string;
            /** Username */
            username: string;
            /** Slug */
            slug: string | null;
        };
        /** ListingInfoResponse */
        ListingInfoResponse: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Slug */
            slug: string | null;
            /** Username */
            username: string | null;
            /** Description */
            description: string | null;
            /** Child Ids */
            child_ids: string[];
            /** Artifacts */
            artifacts: components["schemas"]["SingleArtifactResponse"][];
            /** Onshape Url */
            onshape_url: string | null;
            /** Created At */
            created_at: number;
            /** Views */
            views: number;
            /** Score */
            score: number;
            /** User Vote */
            user_vote: boolean | null;
        };
        /** LoginRequest */
        LoginRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /** LoginResponse */
        LoginResponse: {
            /** User Id */
            user_id: string;
            /** Token */
            token: string;
        };
        /** MyUserInfoResponse */
        MyUserInfoResponse: {
            /** User Id */
            user_id: string;
            /** Email */
            email: string;
            /** Github Id */
            github_id: string | null;
            /** Google Id */
            google_id: string | null;
            /** Permissions */
            permissions: ("is_admin" | "is_mod" | "is_content_manager")[] | null;
            /** First Name */
            first_name: string | null;
            /** Last Name */
            last_name: string | null;
            /** Name */
            name: string | null;
            /** Bio */
            bio: string | null;
        };
        /** NewKeyRequest */
        NewKeyRequest: {
            /**
             * Readonly
             * @default true
             */
            readonly: boolean;
        };
        /** NewKeyResponse */
        NewKeyResponse: {
            /** User Id */
            user_id: string;
            key: components["schemas"]["KeysResponseItem"];
        };
        /** NewListingResponse */
        NewListingResponse: {
            /** Listing Id */
            listing_id: string;
            /** Username */
            username: string;
            /** Slug */
            slug: string;
        };
        /**
         * Order
         * @description Tracks completed user orders through Stripe.
         */
        Order: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** User Email */
            user_email: string;
            /** Stripe Checkout Session Id */
            stripe_checkout_session_id: string;
            /** Stripe Payment Intent Id */
            stripe_payment_intent_id: string;
            /** Stripe Refund Id */
            stripe_refund_id?: string | null;
            /** Created At */
            created_at: number;
            /** Updated At */
            updated_at: number;
            /**
             * Status
             * @enum {string}
             */
            status: "processing" | "in_development" | "being_assembled" | "shipped" | "delivered" | "cancelled" | "refunded" | "failed";
            /** Amount */
            amount: number;
            /** Currency */
            currency: string;
            /** Quantity */
            quantity: number;
            /** Product Id */
            product_id?: string | null;
            /** Shipping Name */
            shipping_name?: string | null;
            /** Shipping Address Line1 */
            shipping_address_line1?: string | null;
            /** Shipping Address Line2 */
            shipping_address_line2?: string | null;
            /** Shipping City */
            shipping_city?: string | null;
            /** Shipping State */
            shipping_state?: string | null;
            /** Shipping Postal Code */
            shipping_postal_code?: string | null;
            /** Shipping Country */
            shipping_country?: string | null;
        };
        /** OrderWithProduct */
        OrderWithProduct: {
            order: components["schemas"]["Order"];
            product: components["schemas"]["ProductInfo"];
        };
        /** ProductInfo */
        ProductInfo: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Images */
            images: string[];
            /** Metadata */
            metadata: {
                [key: string]: string;
            };
        };
        /** PublicUserInfoResponseItem */
        PublicUserInfoResponseItem: {
            /** Id */
            id: string;
            /** Email */
            email: string;
            /** Username */
            username: string;
            /** Permissions */
            permissions?: ("is_admin" | "is_mod" | "is_content_manager")[] | null;
            /** Created At */
            created_at?: number | null;
            /** Updated At */
            updated_at?: number | null;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Name */
            name?: string | null;
            /** Bio */
            bio?: string | null;
        };
        /** PublicUsersInfoResponse */
        PublicUsersInfoResponse: {
            /** Users */
            users: components["schemas"]["PublicUserInfoResponseItem"][];
        };
        /**
         * Robot
         * @description User registered robots. Associated with a robot listing.
         *
         *     Will eventually used for teleop and data collection/aggregation.
         */
        Robot: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Listing Id */
            listing_id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Created At */
            created_at: number;
            /** Updated At */
            updated_at: number;
            /** Order Id */
            order_id?: string | null;
        };
        /** RobotListResponse */
        RobotListResponse: {
            /** Robots */
            robots: components["schemas"]["SingleRobotResponse"][];
        };
        /** RobotURDFResponse */
        RobotURDFResponse: {
            /** Urdf Url */
            urdf_url: string | null;
        };
        /** SetContentManagerRequest */
        SetContentManagerRequest: {
            /** User Id */
            user_id: string;
            /** Is Content Manager */
            is_content_manager: boolean;
        };
        /** SetModeratorRequest */
        SetModeratorRequest: {
            /** User Id */
            user_id: string;
            /** Is Mod */
            is_mod: boolean;
        };
        /** SetRequest */
        SetRequest: {
            /** Onshape Url */
            onshape_url: string | null;
        };
        /** SingleArtifactResponse */
        SingleArtifactResponse: {
            /** Artifact Id */
            artifact_id: string;
            /** Listing Id */
            listing_id: string;
            /** Username */
            username: string;
            /** Slug */
            slug: string;
            /** Name */
            name: string;
            /** Artifact Type */
            artifact_type: "image" | ("urdf" | "mjcf") | ("stl" | "obj" | "dae" | "ply") | ("tgz" | "zip");
            /** Description */
            description: string | null;
            /** Timestamp */
            timestamp: number;
            urls: components["schemas"]["ArtifactUrls"];
            /**
             * Is Main
             * @default false
             */
            is_main: boolean;
            /**
             * Can Edit
             * @default false
             */
            can_edit: boolean;
        };
        /** SingleRobotResponse */
        SingleRobotResponse: {
            /** Robot Id */
            robot_id: string;
            /** User Id */
            user_id: string;
            /** Listing Id */
            listing_id: string;
            /** Name */
            name: string;
            /** Username */
            username: string;
            /** Slug */
            slug: string;
            /** Description */
            description?: string | null;
            /** Order Id */
            order_id?: string | null;
            /** Created At */
            created_at: number;
        };
        /**
         * SortOption
         * @enum {string}
         */
        SortOption: "newest" | "most_viewed" | "most_upvoted";
        /** UpdateArtifactRequest */
        UpdateArtifactRequest: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
        };
        /** UpdateListingRequest */
        UpdateListingRequest: {
            /** Name */
            name?: string | null;
            /** Child Ids */
            child_ids?: string[] | null;
            /** Description */
            description?: string | null;
            /** Tags */
            tags?: string[] | null;
            /** Stripe Link */
            stripe_link?: string | null;
            /** Onshape Url */
            onshape_url?: string | null;
            /** Slug */
            slug?: string | null;
        };
        /** UpdateOrderAddressRequest */
        UpdateOrderAddressRequest: {
            /** Shipping Name */
            shipping_name: string;
            /** Shipping Address Line1 */
            shipping_address_line1: string;
            /** Shipping Address Line2 */
            shipping_address_line2: string | null;
            /** Shipping City */
            shipping_city: string;
            /** Shipping State */
            shipping_state: string;
            /** Shipping Postal Code */
            shipping_postal_code: string;
            /** Shipping Country */
            shipping_country: string;
        };
        /** UpdateRobotRequest */
        UpdateRobotRequest: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Order Id */
            order_id?: string | null;
        };
        /** UpdateUserRequest */
        UpdateUserRequest: {
            /** Email */
            email?: string | null;
            /** Password */
            password?: string | null;
            /** Github Id */
            github_id?: string | null;
            /** Google Id */
            google_id?: string | null;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Name */
            name?: string | null;
            /** Bio */
            bio?: string | null;
        };
        /** UpdateUsernameRequest */
        UpdateUsernameRequest: {
            /** New Username */
            new_username: string;
        };
        /** UploadArtifactResponse */
        UploadArtifactResponse: {
            /** Artifacts */
            artifacts: components["schemas"]["SingleArtifactResponse"][];
        };
        /** UserInfoResponseItem */
        UserInfoResponseItem: {
            /** Id */
            id: string;
            /** Email */
            email: string;
        };
        /**
         * UserPublic
         * @description Defines public user model for frontend.
         *
         *     Omits private/sesnsitive user fields. Is the return type for
         *     retrieving user data on frontend (for public profile pages, etc).
         */
        UserPublic: {
            /** Id */
            id: string;
            /** Email */
            email: string;
            /** Username */
            username: string;
            /** Permissions */
            permissions?: ("is_admin" | "is_mod" | "is_content_manager")[] | null;
            /** Created At */
            created_at: number;
            /** Updated At */
            updated_at?: number | null;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Name */
            name?: string | null;
            /** Bio */
            bio?: string | null;
            /** Stripe Connect Account Id */
            stripe_connect_account_id?: string | null;
            /**
             * Stripe Connect Onboarding Completed
             * @default false
             */
            stripe_connect_onboarding_completed: boolean;
        };
        /** UserSignup */
        UserSignup: {
            /** Signup Token Id */
            signup_token_id: string;
            /** Email */
            email: string;
            /** Password */
            password: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    logout_user_endpoint_auth_api_logout_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    github_client_id_endpoint_auth_github_client_id_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClientIdResponse"];
                };
            };
        };
    };
    github_code_auth_github_code_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GithubAuthRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GithubAuthResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    google_client_id_endpoint_auth_google_client_id_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClientIdResponse"];
                };
            };
        };
    };
    google_login_endpoint_auth_google_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_signup_token_auth_email_signup_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailSignUpRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailSignUpResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_signup_token_auth_email_signup_get__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_signup_token_auth_email_signup_delete__id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteTokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_user_auth_email_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserSignup"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoResponseItem"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_user_auth_email_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    artifact_url_artifacts_url__artifact_type___listing_id___name__get: {
        parameters: {
            query?: {
                size?: "small" | "large";
            };
            header?: never;
            path: {
                artifact_type: "image" | ("urdf" | "mjcf") | ("stl" | "obj" | "dae" | "ply") | ("tgz" | "zip");
                listing_id: string;
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_artifact_info_artifacts_info__artifact_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                artifact_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SingleArtifactResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_artifacts_artifacts_list__listing_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                listing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListArtifactsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_artifacts_upload__listing_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                listing_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_artifacts_upload__listing_id__post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadArtifactResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    edit_artifact_artifacts_edit__artifact_id__put: {
        parameters: {
            query: {
                id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateArtifactRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_artifact_artifacts_delete__artifact_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                artifact_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_main_image_artifacts_list__listing_id__main_put: {
        parameters: {
            query: {
                artifact_id: string;
            };
            header?: never;
            path: {
                listing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_kernel_image_kernel_images_upload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KernelImageUploadRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KernelImageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_kernel_image_info_kernel_images_info__kernel_image_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                kernel_image_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KernelImageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    edit_kernel_image_kernel_images_edit__kernel_image_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                kernel_image_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KernelImageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_kernel_image_kernel_images_delete__kernel_image_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                kernel_image_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_public_kernel_images_kernel_images_public_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KernelImageResponse"][];
                };
            };
        };
    };
    download_kernel_image_kernel_images_download__kernel_image_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                kernel_image_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    new_key_keys_new_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewKeyRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewKeyResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_keys_keys_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListKeysResponse"];
                };
            };
        };
    };
    delete_key_keys_delete__key__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_featured_listings_listings_featured_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeaturedListingsResponse"];
                };
            };
        };
    };
    toggle_featured_listing_listings_featured__listing_id__put: {
        parameters: {
            query: {
                featured: boolean;
            };
            header?: never;
            path: {
                listing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_featured_listing_listings_featured__listing_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                listing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_listings_listings_search_get: {
        parameters: {
            query?: {
                /** @description Page number for pagination */
                page?: number;
                /** @description Search query string */
                search_query?: string;
                /** @description Sort option for listings */
                sort_by?: components["schemas"]["SortOption"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListListingsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_batch_listing_info_listings_batch_get: {
        parameters: {
            query: {
                /** @description List of part ids */
                ids: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBatchListingsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    dump_listings_listings_dump_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DumpListingsResponse"];
                };
            };
        };
    };
    get_user_listings_listings_user__user_id__get: {
        parameters: {
            query?: {
                /** @description Page number for pagination */
                page?: number;
            };
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListListingsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_listings_listings_me_get: {
        parameters: {
            query?: {
                /** @description Page number for pagination */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListListingsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_listing_listings_add_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_add_listing_listings_add_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewListingResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_listing_listings_delete__listing_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                listing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    edit_listing_listings_edit__id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateListingRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_upvoted_listings_listings_upvotes_get: {
        parameters: {
            query?: {
                /** @description Page number for pagination */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListListingsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_listing_listings__listing_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                listing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListingResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_listing_by_username_and_slug_listings__username___slug__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListingResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    vote_listing_listings__id__vote_post: {
        parameters: {
            query: {
                /** @description True for upvote, False for downvote */
                upvote: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_vote_listings__id__vote_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_onshape_document_onshape_set__listing_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                listing_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pull_onshape_document_onshape_pull__listing_id__get: {
        parameters: {
            query?: {
                token?: string | null;
                default_prismatic_joint_effort?: number;
                default_prismatic_joint_velocity?: number;
                default_revolute_joint_effort?: number;
                default_revolute_joint_velocity?: number;
                voxel_size?: number;
                convex_collision_meshes?: boolean;
                add_mjcf?: boolean;
            };
            header?: never;
            path: {
                listing_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_pull_onshape_document_onshape_pull__listing_id__get"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_orders_orders_user_orders_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"][];
                };
            };
        };
    };
    get_order_orders_order__order_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_order_with_product_orders_order_with_product__order_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderWithProduct"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_orders_with_products_orders_user_orders_with_products_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrderWithProduct"][];
                };
            };
        };
    };
    update_order_address_orders_update_order_address__order_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                order_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrderAddressRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_robot_robots_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRobotRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Robot"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_robot_robots_get__robot_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                robot_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Robot"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_user_robots_robots_list_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RobotListResponse"];
                };
            };
        };
    };
    update_robot_robots_update__robot_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                robot_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRobotRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Robot"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_robot_robots_delete__robot_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                robot_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_order_robot_robots_check_order__order_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                order_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Robot"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_robot_urdf_robots_urdf__listing_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                listing_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RobotURDFResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_payment_intent_stripe_create_payment_intent_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    refund_payment_intent_stripe_refunds__order_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                order_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRefundsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stripe_webhook_stripe_webhook_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    create_checkout_session_stripe_create_checkout_session_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCheckoutSessionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateCheckoutSessionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_product_stripe_get_product__product_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_connect_account_stripe_connect_account_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateConnectAccountResponse"];
                };
            };
        };
    };
    create_connect_account_session_stripe_connect_account_session_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_create_connect_account_session_stripe_connect_account_session_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_test_accounts_stripe_connect_delete_accounts_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    get_user_info_endpoint_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyUserInfoResponse"];
                };
            };
        };
    };
    update_profile_users_me_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_endpoint_users_me_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    get_users_batch_endpoint_users_batch_get: {
        parameters: {
            query: {
                ids: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicUsersInfoResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_users_public_batch_endpoint_users_public_batch_get: {
        parameters: {
            query: {
                ids: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicUsersInfoResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_info_by_id_endpoint_users__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoResponseItem"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_public_user_info_endpoint_users_public_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
        };
    };
    get_public_user_info_by_id_endpoint_users_public__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_username_users_me_username_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUsernameRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_api_key_endpoint_users_validate_api_key_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    set_moderator_users_set_moderator_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetModeratorRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_username_availability_users_check_username__username__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: boolean;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_content_manager_users_set_content_manager_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetContentManagerRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPublic"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    store_ice_candidate_teleop_rtc_store_post: {
        parameters: {
            query: {
                candidate: string;
                robot_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    poll_ice_candidates_teleop_rtc_poll_ice_candidates_get: {
        parameters: {
            query: {
                robot_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
